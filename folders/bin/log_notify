#!/usr/bin/env python3
r"""
A script for finding interesting events from stdin.

All input (unless specified for filtering) is output as is. If interesting events are found a popup is
displayed, with an optional sound.

Both the pattern and message can be regular expressions:
https://docs.python.org/2/library/re.html#regular-expression-syntax

The Message can use backreferences from the Trigger pattern. Meaning you can use groups in the trigger
and re-use them in the message directly (&, \1, \2, and the like).

IMPORTANT: Use raw literal notation: r"\n" for both Trigger and Message. Otherwise the
backslashed combinations will be interpreted directly into singular characters which
won't work with regular expression matching.
"""

import sys
import subprocess
import re
from argparse import ArgumentParser


class Trigger:
    def __init__(self, trigger, title="", message="", sound=None):
        self.trigger = trigger
        self.title = title
        self.message = message
        self.sound = sound


triggers = (

    Trigger(r"ERROR",                                                        message=r"Error in logs",                  sound="Funk"),
    Trigger(r"Server startup in",                                            message=r"Liferay operational",            sound="Glass"),
    Trigger(r"Started Application in ([^ ]+ [^ ]+)",                         message=r"Application started in \1",      sound="Glass"),
    Trigger(r"Expanding: .*?([^/]+)\.war into",                              message=r"\1 hotdeploying",                sound="Bottle"),
    Trigger(r"Undeploying context \[/(.+)\]",                                message=r"\1 undeployed",                  sound="Bottle"),
    Trigger(r"\d+ portlets? for (.+) (is|are) available for use",            message=r"Module \1 available",            sound=None),
    Trigger(r"\d+ themes? for (.+) (is|are) available for use",              message=r"Theme \1 available",             sound=None),
    Trigger(r"A valid shutdown command was received via the shutdown port.", message=r"Liferay starting to shut down",  sound=None),
    Trigger(r'INFO: Destroying ProtocolHandler \["ajp-bio-8009"\]',          message=r"Liferay finished shutting down", sound=None),

)

# List of plaintext or regular expression string patterns which will be filtered out if found.
filters = [
    #r"Spamline",
    #r"notherone",
]


def determine_notify_command():
    kde = subprocess.call(("which kdialog > /dev/null"), shell=True)
    notify = subprocess.call(("which notify-send > /dev/null"), shell=True)
    mac = subprocess.call(("which osascript > /dev/null"), shell=True)

    if kde == 0:
        return "kde"
    elif mac == 0:
        return "mac"
    elif notify == 0:
        return "notify"
    else:
        print("No notify command found. Tried kdialog, notify-send and mac osascript -e display notification.\n"
              "notify-send command can be installed separately with libnotify package.", file=sys.stderr)
        exit(1)


def notify(notify_cmd, global_title, title, message, sound, duration=5):

    if not title:
        title = global_title

    if notify_cmd == "mac":
        base_part = 'display notification'
        message_part = f' "{message}"' if message else ""
        title_part = f' with title "{title}"' if title else ""
        sound_part = f' sound name "{sound}"' if sound else ""
        notify_args = ("osascript", "-e", base_part +message_part + title_part + sound_part)
    elif notify_cmd == "notify":
        notify_args = ("notify-send", "-t", "{}000".format(duration), title, message)
    elif notify_cmd == "kde":
        notify_args = ("kdialog", "--title", title, "--passivepopup", message, str(duration))
    subprocess.run(notify_args, stderr=sys.stderr)


def log_notify(title):
    notify_cmd = determine_notify_command()
    try:
        while True:
            line = sys.stdin.readline()

            for trigger in triggers:
                match = re.search(trigger.trigger, line)
                if match is not None:
                    notify(notify_cmd, title, match.expand(trigger.title), match.expand(trigger.message), trigger.sound)

            if all(re.search(filter, line) is None for filter in filters):
                print(line, end='')

            if line == '':
                break
    except KeyboardInterrupt:
        pass


if __name__ == "__main__":

    parser = ArgumentParser(
        description="Print lines from stdin to stdout. On trigger lines invoke a"
                    " notification. Triggers are defined in the script and can"
                    " easily be modified."
                    " Normal usage: tail -f logfile | this_script.py"
    )
    parser.add_argument("title", nargs="?", default="log_notify", help="Title for notifications coming from this instance of the script.")
    args = parser.parse_args()
    log_notify(args.title)
